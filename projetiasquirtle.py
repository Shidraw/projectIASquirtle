# -*- coding: utf-8 -*-
"""ProjetIACarapuce.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FOw-NVJDxz_bHSwM79zcSeWPNmWKOozP
"""

# Commented out IPython magic to ensure Python compatibility.
import cv2
import numpy as np
import requests
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import sys
import datetime
from tensorflow import keras
from tensorflow.keras.models import Model
import tensorflow as tf

# %pylab inline

url_squirtle = r'https://www.pokepedia.fr/images/c/cc/Carapuce-RFVF.png'
resp = requests.get(url_squirtle, stream=True).raw
image_array_squirtle = np.asarray(bytearray(resp.read()), dtype="uint8")
print(f'Shape of the image {image_array_squirtle.shape}')
image_squirtle = cv2.imdecode(image_array_squirtle, cv2.IMREAD_COLOR)
plt.axis('off')
plt.imshow(cv2.cvtColor(image_squirtle, cv2.COLOR_BGR2RGB))
plt.show()

url_bulbasaur = r'https://www.pokepedia.fr/images/e/ef/Bulbizarre-RFVF.png'
resp = requests.get(url_bulbasaur, stream=True).raw
image_array_bulbasaur = np.asarray(bytearray(resp.read()), dtype="uint8")
print(f'Shape of the image {image_array_bulbasaur.shape}')
image_bulbasaur = cv2.imdecode(image_array_bulbasaur, cv2.IMREAD_COLOR)
plt.axis('off')
plt.imshow(cv2.cvtColor(image_bulbasaur, cv2.COLOR_BGR2RGB))
plt.show()

res = cv2.resize(image_squirtle , dsize=(40,40), interpolation=cv2.INTER_CUBIC)
print(res.shape)
res = cv2.cvtColor(res,cv2.COLOR_RGB2GRAY)
print(res.shape)
res = cv2.threshold(res, 127, 255, cv2.THRESH_BINARY)[1]
d = res
for row in range(0,40):
    for col in range(0,40):
        print('%03d ' %d[row][col],end=' ')
    print('')
plt.imshow(cv2.cvtColor(res, cv2.COLOR_BGR2RGB))
plt.axis('off')
plt.show()
#
#

#Convert to black & white
img_bw = cv2.imdecode(image_array_squirtle, cv2.IMREAD_GRAYSCALE)
(thresh, img_bw) = cv2.threshold(img_bw, 127, 255, cv2.THRESH_BINARY)
plt.axis('off')
plt.imshow(cv2.cvtColor(img_bw, cv2.COLOR_BGR2RGB))

#defining a vertical edge detection kernel 
kernel = np.matrix([[-10,0,10],[-10,0,10],[-10,0,10]])
print(kernel)
img_1 = cv2.filter2D(img_bw, -1, kernel)
plt.axis('off')
plt.imshow(cv2.cvtColor(img_1, cv2.COLOR_BGR2RGB))

#defining an horizontal edge detection kernel 
kernel = np.matrix([[10,10,10],[0,0,0],[-10,-10,-10]])
print(kernel)
img_1 = cv2.filter2D(img_bw, -1, kernel)
plt.axis('off')
plt.imshow(cv2.cvtColor(img_1, cv2.COLOR_BGR2RGB))

#Import dataset (squirtles/bulbasaurs)
import pathlib
import os
data_dir = tf.keras.utils.get_file(
    "dataset5.zip",
    "https://github.com/Shidraw/projectIASquirtle/blob/main/dataset5.zip?raw=true",
    extract=False)

import zipfile
with zipfile.ZipFile(data_dir, 'r') as zip_ref:
    zip_ref.extractall('/content/datasets')

data_dir = pathlib.Path('/content/datasets/dataset')
print(data_dir)

image_count = len(list(data_dir.glob('*/*')))
print(image_count)

batch_size = 3
img_height = 200
img_width = 200

train_data = tf.keras.preprocessing.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="training",
  seed=42,
  image_size=(img_height, img_width),
  batch_size=batch_size,
  )

val_data = tf.keras.preprocessing.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="validation",
  seed=42,
  image_size=(img_height, img_width),
  batch_size=batch_size)

class_names = val_data.class_names
print(class_names)

plt.figure(figsize=(10, 10))
for images, labels in train_data.take(1):
  for i in range(3):
    ax = plt.subplot(1, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")

from tensorflow.keras import layers

# 2 => squirtle ou bulbasaur
num_classes = 2

#Sequential ~~ Container de convolutions
model = tf.keras.Sequential([
    layers.experimental.preprocessing.Rescaling(1./255),
    layers.Conv2D(256,4, activation='relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(128,4, activation='relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(64,4, activation='relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(32,4, activation='relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(16,4, activation='relu'),
    layers.MaxPooling2D(),
    #Flatten => construire un vecteur à partir de la matrice de convolution
    layers.Flatten(),
    layers.Dense(64,activation='relu'),
    #softmax => probabilité entre les différentes classes
    layers.Dense(num_classes, activation='softmax')
])

model.compile(optimizer='adam',
              loss=tf.losses.SparseCategoricalCrossentropy(from_logits=True),
  metrics=['accuracy'],)

logdir="logs"
tensorboard_callback = keras.callbacks.TensorBoard(log_dir=logdir,histogram_freq=1, write_images=logdir,
                                                   embeddings_data=train_data)

#augmentation de l'entrainement via le nb d'epochs
model.fit( 
  train_data,
  validation_data=val_data,
  epochs=15,
  callbacks=[tensorboard_callback]
)

model.summary()

from google.colab import files
file_to_predict = files.upload()
for file_ in file_to_predict:
    image_to_predict = cv2.imread(file_,cv2.IMREAD_COLOR)
    plt.imshow(cv2.cvtColor(image_to_predict, cv2.COLOR_BGR2RGB))
    plt.show()
    img_to_predict = np.expand_dims(cv2.resize(image_to_predict,(200,200)), axis=0) 
    res = model.predict_classes(img_to_predict)
    print(model.predict_classes(img_to_predict))
    print(model.predict(img_to_predict))
    if res == 1:
        plt.imshow(cv2.cvtColor(image_squirtle, cv2.COLOR_BGR2RGB))
        plt.show()
        print("IT'S A SQUIRTLE !")
    elif res == 0 :
        plt.imshow(cv2.cvtColor(image_bulbasaur, cv2.COLOR_BGR2RGB))
        plt.show()
        print("IT'S A BULBASAUR !")